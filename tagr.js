// Generated by CoffeeScript 1.3.1
(function() {
  var Cls, EventEmitter, HeadCache, Script, Stylesheet, Tagr, TagrList, checkNode, n, tagr, _i, _j, _len, _len1, _ref, _ref1,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  EventEmitter = (function() {

    EventEmitter.name = 'EventEmitter';

    function EventEmitter() {}

    EventEmitter.prototype.listeners = function(type) {
      if (this.hasOwnProperty.call((this._events != null ? this._events : this._events = {}), type)) {
        return this._events[type];
      } else {
        return this._events[type] = [];
      }
    };

    EventEmitter.prototype.on = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.addListener.apply(this, args);
    };

    EventEmitter.prototype.once = function(type, f) {
      var g;
      return this.on(type, g = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        f.apply(this, args);
        return this.removeListener(type, g);
      });
    };

    EventEmitter.prototype.addListener = function(type, f) {
      if ((this.listeners(type).push(f)) > this._maxListeners && this._maxListeners !== 0) {
        if (typeof console !== "undefined" && console !== null) {
          console.warn("Possible EventEmitter memory leak detected. " + this._events[type].length + " listeners added. Use emitter.setMaxListeners() to increase limit.");
        }
      }
      this.emit("newListener", type, f);
      return this;
    };

    EventEmitter.prototype.removeListener = function(type, f) {
      var i;
      if ((i = this.listeners(type).indexOf(f)) !== -1) {
        this.listeners(type).splice(i, 1);
      }
      return this;
    };

    EventEmitter.prototype.removeAllListeners = function(type) {
      var k, v, _ref;
      _ref = this._events || {};
      for (k in _ref) {
        v = _ref[k];
        if (!(type != null) || type === k) {
          v.splice(0, v.length);
        }
      }
      return this;
    };

    EventEmitter.prototype.emit = function() {
      var args, f, type, _i, _len, _ref;
      type = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      _ref = this.listeners(type);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        f = _ref[_i];
        f.apply(this, args);
      }
      return this.listeners(type).length > 0;
    };

    EventEmitter.prototype._maxListeners = 10;

    EventEmitter.prototype.setMaxListeners = function(_maxListeners) {
      this._maxListeners = _maxListeners;
    };

    return EventEmitter;

  })();

  this.tagr = tagr = {
    use: function(el) {
      return new Tagr(el);
    },
    create: function(tag, attrs) {
      var e, k, v;
      if (attrs == null) {
        attrs = {};
      }
      e = document.createElement(tag);
      for (k in attrs) {
        v = attrs[k];
        e.setAttribute(k, v);
      }
      return new Tagr(e);
    },
    parse: function(str) {
      var arg, args, attrs, e, tag, _i, _len;
      if (typeof str === 'string') {
        return str;
      }
      tag = str[0], attrs = str[1], args = 3 <= str.length ? __slice.call(str, 2) : [];
      e = tagr.create(tag, attrs);
      for (_i = 0, _len = args.length; _i < _len; _i++) {
        arg = args[_i];
        e.push(tagr.parse(arg));
      }
      return e;
    },
    guid: 0
  };

  tagr.ready = (function() {
    var flush, fn, fns, loaded;
    loaded = /^loade|c/.test(document.readyState);
    fns = [];
    flush = function(f) {
      var _results;
      loaded = true;
      _results = [];
      while (f = fns.shift()) {
        _results.push(f());
      }
      return _results;
    };
    if (document.documentElement.doScroll) {
      document.attachEvent("onreadystatechange", fn = function() {
        if (/^c/.test(document.readyState)) {
          document.detachEvent("onreadystatechange", fn);
          return flush();
        }
      });
      return function(fn) {
        if (self !== top) {
          if (loaded) {
            return fn();
          } else {
            return fns.push(fn);
          }
        } else {
          return (function() {
            try {
              testEl.doScroll("left");
            } catch (e) {
              return setTimeout((function() {
                return ready(fn);
              }), 50);
            }
            return fn();
          })();
        }
      };
    }
    if (document.addEventListener != null) {
      document.addEventListener("DOMContentLoaded", fn = function() {
        document.removeEventListener("DOMContentLoaded", fn, false);
        return flush();
      }, false);
      return function(fn) {
        if (loaded) {
          return fn();
        } else {
          return fns.push(fn);
        }
      };
    }
  })();

  Stylesheet = function(media) {
    var s;
    if (media == null) {
      media = 'all';
    }
    s = document.createElement('style');
    s.type = 'text/css';
    s.media = media;
    document.getElementsByTagName('head')[0].appendChild(s);
    return s;
  };

  Script = function() {
    var s;
    s = document.createElement('script');
    s.src = 'about:blank';
    document.getElementsByTagName('head')[0].appendChild(s);
    return s;
  };

  HeadCache = (function() {
    var hc, sCache;
    hc = {};
    sCache = {};
    hc.getStylesheet = function(media) {
      var s;
      if (media == null) {
        media = 'all';
      }
      if (sCache[media] != null) {
        return sCache[media];
      }
      s = new Stylesheet(media);
      return sCache[media] = s.sheet || s.styleSheet;
    };
    return hc;
  })();

  checkNode = function(e) {
    if (typeof e === 'string') {
      return document.createTextNode(e);
    }
    if (e.node.parentNode) {
      throw new Error('Must remove element before appending elsewhere.');
    }
    return e.node;
  };

  Tagr = (function(_super) {

    __extends(Tagr, _super);

    Tagr.name = 'Tagr';

    function Tagr(node, parent) {
      var attr, c, i, k, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      this.node = node;
      this.parent = parent;
      this.node.setAttribute('data-tagr', String((this.guid = tagr.guid++)));
      this.tag = this.node.nodeName.toLowerCase();
      this.attrs = {};
      _ref = this.node.attributes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        attr = _ref[_i];
        this.attrs[attr.name] = attr.value;
      }
      this.classes = this.node.className.match(/\S+/g) || [];
      this.style = {};
      _ref1 = this.node.style;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        k = _ref1[_j];
        this.style[k] = this.node.style[k];
      }
      this.length = this.node.childNodes.length;
      _ref2 = this.node.childNodes;
      for (i = _k = 0, _len2 = _ref2.length; _k < _len2; i = ++_k) {
        c = _ref2[i];
        this[i] = (c.nodeType === 1 ? new Tagr(c, this) : c.nodeValue);
      }
    }

    Tagr.prototype._detach = function() {
      return this.node = null;
    };

    Tagr.prototype._attach = function() {
      return this.node = Sizzle("[data-tagr=\"" + this.guid + "\"]")[0];
    };

    Tagr.prototype.splice = function() {
      var add, c, del, i, j, ret, right, _i, _j, _k, _l, _len, _ref, _ref1, _ref2;
      i = arguments[0], del = arguments[1], add = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      if (i < 0 || isNaN(i)) {
        throw 'Invalid index';
      }
      if (del) {
        for (c = _i = 0; 0 <= del ? _i < del : _i > del; c = 0 <= del ? ++_i : --_i) {
          this[i + c].parent = null;
          this.node.removeChild(this.node.childNodes[i]);
        }
      }
      ret = (function() {
        var _j, _results;
        _results = [];
        for (j = _j = 0; 0 <= del ? _j < del : _j > del; j = 0 <= del ? ++_j : --_j) {
          _results.push(this[i + j]);
        }
        return _results;
      }).call(this);
      if (del > add.length) {
        for (j = _j = _ref = i + del, _ref1 = this.length; _ref <= _ref1 ? _j < _ref1 : _j > _ref1; j = _ref <= _ref1 ? ++_j : --_j) {
          this[j - del] = this[j];
        }
      }
      if (add.length > del) {
        for (j = _k = _ref2 = this.length + add.length - 1; _ref2 <= i ? _k < i : _k > i; j = _ref2 <= i ? ++_k : --_k) {
          this[j] = this[j - add.length];
        }
      }
      if (add.length) {
        right = this.node.childNodes[i];
        for (j = _l = 0, _len = add.length; _l < _len; j = ++_l) {
          c = add[j];
          if (typeof c === 'object' && (c != null ? c.constructor : void 0) === Array) {
            c = tagr.parse(c);
          }
          this.node.insertBefore(checkNode(c), right);
          this[i + j] = c;
          c.parent = this;
        }
      }
      this.length += (-del) + add.length;
      return ret;
    };

    Tagr.prototype.push = function(e) {
      this.splice(this.length, 0, e);
      return this.length;
    };

    Tagr.prototype.pop = function() {
      return this.splice(this.length - 1, 1)[0];
    };

    Tagr.prototype.unshift = function(e) {
      this.splice(0, 0, e);
      return this.length;
    };

    Tagr.prototype.shift = function() {
      return this.splice(0, 1)[0];
    };

    Tagr.prototype.remove = function(e) {
      return this.splice(this.indexOf(e), 1);
    };

    Tagr.prototype.insert = function(i, e) {
      return this.splice(i, 0, e);
    };

    Tagr.prototype.empty = function() {
      return this.splice(0, this.length);
    };

    Tagr.prototype.indexOf = function(e) {
      return [].indexOf.call(this, e);
    };

    Tagr.prototype.match = function(match) {
      return new TagrList(this.node, match);
    };

    Tagr.prototype.setAttr = function(name, v) {
      if (name === 'class') {
        this.classes = v.match(/\S+/g) || [];
      }
      this.node.setAttribute(name, v);
      return this.attrs[name] = v;
    };

    Tagr.prototype.setClass = function(name, toggle) {
      var c;
      if (toggle == null) {
        toggle = true;
      }
      if (toggle) {
        return this.setAttr('class', this.classes.concat([name]).join(' '));
      } else {
        return this.setAttr('class', ((function() {
          var _i, _len, _ref, _results;
          _ref = this.classes;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            c = _ref[_i];
            if (c !== name) {
              _results.push(c);
            }
          }
          return _results;
        }).call(this)).join(' '));
      }
    };

    Tagr.prototype.setStyle = function() {
      var args, k, v, _results;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (args.length === 2) {
        k = args[0], v = args[1];
        args = {};
        args[k] = v;
      } else {
        args = args[0];
      }
      _results = [];
      for (k in args) {
        v = args[k];
        _results.push(this.style[k] = this.node.style[k] = v);
      }
      return _results;
    };

    Tagr.prototype.addListener = function(type, f) {
      var _this = this;
      this.node.addEventListener(type, (function(e) {
        return _this.emit(type, e);
      }), false);
      return Tagr.__super__.addListener.call(this, type, f);
    };

    Tagr.prototype.toJSON = function() {
      var x;
      return [this.tag, this.attrs].concat(__slice.call((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = this.length; _i < _len; _i++) {
            x = this[_i];
            _results.push(typeof x === 'string' ? x : x.toJSON());
          }
          return _results;
        }).call(this)));
    };

    return Tagr;

  })(EventEmitter);

  TagrList = (function(_super) {

    __extends(TagrList, _super);

    TagrList.name = 'TagrList';

    function TagrList(node, match) {
      var el, i, _i, _len, _ref;
      this.node = node;
      this.match = match;
      this.length = 0;
      _ref = Sizzle(match, this.node);
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        el = _ref[i];
        this[i] = new Tagr(el);
        this.length++;
      }
    }

    TagrList.prototype.addListener = function(type, f) {
      var _this = this;
      this.node.addEventListener(type, (function(e) {
        if (Sizzle.matches("[data-tagr='" + (_this.node.getAttribute('data-tagr')) + "'] " + _this.match, [e.target]).length) {
          return f.call(new Tagr(e.target), e);
        }
      }), false);
      return TagrList.__super__.addListener.call(this, type, f);
    };

    TagrList.prototype.setStyle = function() {
      var args, k, s, v, _results;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      s = HeadCache.getStylesheet();
      if (args.length === 2) {
        k = args[0], v = args[1];
        args = {};
        args[k] = v;
      } else {
        args = args[0];
      }
      _results = [];
      for (k in args) {
        v = args[k];
        _results.push(s.insertRule("[data-tagr='" + (this.node.getAttribute('data-tagr')) + "'] " + this.match + " { " + k + ": " + v + " }", s.cssRules.length));
      }
      return _results;
    };

    return TagrList;

  })(EventEmitter);

  _ref = ['forEach', 'slice'];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    n = _ref[_i];
    if (Array.prototype[n] != null) {
      _ref1 = [Tagr, TagrList];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        Cls = _ref1[_j];
        Cls.prototype[n] = Array.prototype[n];
      }
    }
  }

  new Script('https://raw.github.com/jquery/sizzle/master/sizzle.js');

}).call(this);
